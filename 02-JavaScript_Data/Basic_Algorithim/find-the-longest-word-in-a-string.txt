function findLongestWordLength(str) {
  var words = str.split(' ');
  var maxLength = 0;

  for (var i = 0; i < words.length; i++) {
    if (words[i].length > maxLength) {
      maxLength = words[i].length;
    }
  }

  return maxLength;
}

findLongestWordLength("The quick brown fox jumped over the lazy dog");


/*Hints
Hint 1
You should split the string into an array of words.

Hint 2
You will need to figure out a way to keep track globally of the greatest current length.

Hint 3
Remember how to get the length of elements on the array? Array[index].length.


*/

/*
function findLongestWordLength(str) {
  //split the string into individual words
  //(important!!, you'll see why later)
  str = str.split(" ");

  //str only has 1 element left that is the longest element,
  //return the length of that element
  if (str.length == 1) {
    return str[0].length;
  }

  //if the first element's length is greater than the second element's (or equal)
  //remove the second element and recursively call the function)
  if (str[0].length >= str[1].length) {
    str.splice(1, 1);
    return findLongestWordLength(str.join(" "));
  }

  //if the second element's length is greater thant the first element's start
  //call the function past the first element
  if (str[0].length <= str[1].length) {
    // from the first element to the last element inclusive.
    return findLongestWordLength(str.slice(1, str.length).join(" "));
  }
}
Code Explanation
The first line splits the string into individual words. Then we check if str only has 1 element 
left then that is the longest element and we return it. If the first element’s length is greater 
than the second element’s (or equal), we remove the second element and recursively call the 
function findLongestWord. However, if the second element’s length is greater thant the first 
element’s start, then we call the function past the first element.
*/