/*
Hint 1
Since you have no idea how many parameters were passed, it would be best to loop through the arguments before looping through the arrays.

Hint 2
It isn’t necessary to use loops. You can use functions such as map(), reduce() or others if you want.

Hint 3
You will have to check if the current value is already on the array to be returned for every value.

*/


function uniteUnique(arr) {
  // create a placeholder for the final returned array of unique numbers in the order in wich we found them
  var hold = [];
  // use a for of loop to iterate over each of the given arrays
  for(var i of arguments) {
    // use a for of loop to iterate over each number in one of the given arrays
    for(var k of i) {
      // if our placeholder array does not contain the given number 
      if(hold.indexOf(k) === -1) {
        // add the number to the give array
        hold.push(k);
      }
    }
  }
  // return our finished placeholder array
  return hold;
}

uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);



/*OR
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function uniteUnique(arr1, arr2, arr3) {
  // Creates an empty array to store our final result.
  var finalArray = [];

  // Loop through the arguments object to truly make the program work with two or more arrays
  // instead of 3.
  for (var i = 0; i < arguments.length; i++) {
    var arrayArguments = arguments[i];

    // Loops through the array at hand
    for (var j = 0; j < arrayArguments.length; j++) {
      var indexValue = arrayArguments[j];

      // Checks if the value is already on the final array.
      if (finalArray.indexOf(indexValue) < 0) {
        finalArray.push(indexValue);
      }
    }
  }

  return finalArray;
}

Create empty array finalResult to store the final result.
Loop through the arguments object in the outer loop and store it in arrayArguments.
The inner loop is used to loop through individual array elements.
If the element doesn’t already exist in finalArray, add it.
Return finalArray.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




function uniteUnique() {

  return (
    //Get all the arguments into an array
    Array.from(arguments)
    
    //Flatten the arrays within the array
    .reduce(function(a, b){ 
      return a.concat(b);}, [])
    
    //Filter out the duplicates
    .filter(function(val, i, arr){ 
      return arr.indexOf(val) == i;})
  )
}


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


function uniteUnique(...arrays) {
  //make an array out of the given arrays and flatten it (using the spread operator)
  const flatArray = [].concat(...arrays);

  // create a Set which clears any duplicates since it's a regulat set and not a multiset
  return [...new Set(flatArray)];
}

We first use concat() with an empty array as a starting point and the spread operator ... to create an array out of the Arguments object and to flatten it at the same time
then we use the new ES2015 Set object to store only unique values


*/
