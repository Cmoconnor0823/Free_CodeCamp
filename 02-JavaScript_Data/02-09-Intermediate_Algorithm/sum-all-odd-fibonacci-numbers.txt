/*
You will need to gather all the Fibonacci numbers and then check for the odd ones. Once you get the odd ones then you will add them all. The last number should be the number given as a parameter if it actually happens to be an off Fibonacci number.

Hint 1
To get the next number of the series, you need to add the current one to the previous and that will give you the next one.

Hint 2
To check if a number is even all you have to check is if number % 2 == 0.

Hint 3
As you get the next odd one, donâ€™t forget to add it to a global variable that can be returned at the end. result += currNumber; will do the trick.

*/

function sumFibs(num) {
  
  var fibonacci = [1, 1];
  
  for (var i = 0; i <= num; i++) {
    // calculate fibonacci number
    var fibNum = fibonacci[i] + fibonacci[i+1];
    // fibonacci number must be <= num
    if (fibNum <= num) {
      // push fibonacci number in array
      fibonacci.push(fibNum);
    } else {
      // stop the loop
      break;
    }
  }
  console.log(fibonacci);

  return fibonacci.filter(function(e) {
    // filter only odd numbers
    //console.log(e,"e");
    return e % 2 !== 0;
  }).reduce(function(a, b) {
    // sum all odd numbers
    console.log(a,b,"a,b")
    return a + b;
  });
  
}
sumFibs(4);
console.log(sumFibs(4));



/* Or
function sumFibs(num) {
  //Create a variable to keep record of the current and previous numbers along with the result that will be returned.
  var prevNumber = 0;
  var currNumber = 1;
  var result = 0;

  while (currNumber <= num) {
    //Use a while loop to make sure we do not go over the number given as parameter
    if (currNumber % 2 !== 0) {
      //We use the modulo operand to check if the current number is odd or even. If it is odd, add it to the result.
      result += currNumber;
    }
    // Complete the Fibonacci circle by rotating getting the next number and swapping values after
    currNumber += prevNumber;
    prevNumber = currNumber - prevNumber;
  }
//Return the result
  return result;
}

// test here
console.log(sumFibs(4));


*/